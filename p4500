#!/usr/bin/python -B

import audioop
import os
import subprocess
import re
import wave
import sys

import numpy
import numpy.fft
import scipy.io.wavfile

# Local modules
import config
import utils
import comparator
import normalize


def check_args():
  try:
    assert len(sys.argv) == 3

    return True
  except (AssertionError, IndexError, IOError):
    sys.stderr.write('ERROR Usage: {0} <path> <path>\n'.format(sys.argv[0]))
    return False
  except wave.Error:
    sys.stderr.write('ERROR Both files must be of WAVE format\n')
    return False

def is_wave(path):
  try:
    wave.open(path).close()
    return True
  except( IOError, wave.Error):
    return False  

# Check if the given file is an MP3 file using header information
def is_mp3(path):
  return "ID3" in subprocess.check_output(["file", "-b", path])

def main():
  # Check arguments and check if WAVE file
  if not check_args():
    sys.exit(1)

  file1 = sys.argv[1]
  file2 = sys.argv[2]
  # Returns a file path, "/tmp/newfile.wav"
  if is_mp3(file1):
    file1 = normalize.mp3_to_wav( file1 )
  if is_mp3(file2):
    file2 = normalize.mp3_to_wav( file2 )

  if not (is_wave(file1) and is_wave(file2)):
    sys.stderr.write('ERROR Usage: input files must be of MP3 or WAVE format\n'.format(sys.argv[0]))

  audio_file1 = normalize.normalize_wave_file(sys.argv[1])
  audio_file2 = normalize.normalize_wave_file(sys.argv[2])

  ffts1 = normalize.get_fft(audio_file1)
  ffts2 = normalize.get_fft(audio_file2)

  match = comparator.compare(ffts1, ffts2)

  if match:
    print "MATCH"
  else:
    print "NO MATCH"

if __name__ == '__main__':
  main()
